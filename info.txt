WEBPACK : src/index.js

REACT : 

REACT-DOM :
REACT-NATIVE : 
ELECTON : 




Las aplicaciones de React se forman por uno o mas componentes : 

1- Todos los componentes de React son Funciones
2- Siempre arrancan en Mayuscula
3- Todos los componentes tienen retorno
4- Los componentes pueden retornar un UNICO elemento
5- Todos pueden recibir props
6- Todos pueden tener un estado






const Foo = () => {}

function Foo(){}


JSX : JS and XML


function foo(){}


foo()   ===    <foo />


HOOKS : Son funciones que incorporan nuevas herramientas en un componente, como por ejemplo la capacidad de tener estado, ciclos de vida, etc...


1) Solo van adentro de un componente
2) No pueden estar en condiciones ni bucles
3) Todos son funciones entonces se ejecutan



Crear el componente ItemCount que tiene que estar dentro de ItemListContainer y tiene que tener un texto con 3 botones, aumentar - disminuir y confirmar y poder recibir 3 props : stock (numero) - initial(numero) y onAdd (funcion)


app -
    |_ navbar
      |_ widget
    |_ itemListContainer
      |_itemCount



OPERADOR TERNARIO 

(condici贸n) ? (si se cumple) : (si no se cumple)

condici贸n ? hace esto if true : esto if false


condici贸n ? retorna esto if true : o esto if false


const a = true ? console.log("Hola") : 2

const a = if(true){ console.log("Hola") } else { return 2 }






SENTENCIA Y EXPRESIONES


const a = 1;

console.log("Hola");


const a = 1+1;


const arr = [1,2,3]
const aux = []
arr.forEach()

const aux = arr.map()



function foo(){

}

const a = foo() // a = undefined


IIFE : Imediatly Invoked Function Expression / Funciones autoinvocadas




(function(){
  
})()



class App extends Component {

  constructor(){}

  render() {}

  componentDidMount() {}

  componentDidUpdate() {}

  componentWillUnmount() {}


}




const Usuarios = () => {

  const cargando = useState(true)

  useEffect(()=>{
    //ya consegui los usuarios!
  })

  if(cargando){
    return (
      <ul>
        cargando...
      </ul>  
    )
  }else{
    return (
      usuarios...
    )
  }
}


1ER CICLO DE VIDA :
1- Carga Usuarios
2- Crea el estado por primera vez (con true)
3- Se evalua por primera vez el condicional 
4- Se muestra cargando (renderizado)
5- Se activa el efecto
6- Modifico el estado


2DO CICLO DE VIDA :
1- Carga Usuarios
2- Se cambia el valor a false del estado
3- Se evalua el condicional de nuevo , ahora cae en el else porque el estado es false
4- Se vuelve a ejecutar el efecto



PATRON CONTAINER 



Promise

const promesa = new Promise((res,rej)=>{})


promesa.then(()=>{})
promesa.catch(()=>{})



const CustomFetch= (time,task) =>{

    return new Promise((resolve,reject)=>{
        setTimeout(() => {
          let random = Math.random()
          random > 0.5 ? resolve(task) : reject(task)
        }, time);
    })

}

const p = new Promise((res,rej)=>{
    //?
    //res()
    //rej()
})

p.then(()=>{
    console.log()
})

p.catch(()=>{
    
})


FETCH : le das una direccion(url/ip) y las condiciones de la peticion

TCP/IP : Transporte de datos / layer
DNS : Dominio de nombres / layer

FTP : File Transfer Protocol
POP/IMAP/SMTP : Protocolo de correo
SSH : Secure Shell
HTTP/S : 


REQUEST(CLIENTE)

URL/IP  - METODO (GET-POST-DELETE-PUT) - version - 
headers - body



RESPONSE(SERVIDOR)

version - CODIGO - MENSAJE
headers - body

content-type : application/exe



CODIGOS DE STATUS : 


1xx : Informaci贸n

2xx : Correcto
  200 : OK
  201 : Created

3xx : Redirecciones
  302 : Found
  304 : Not Modified

4xx : Errores del cliente
  400 : Bad Request
  401 : Unauthorized
  403 : Forbidden
  404 : Not Found
  405 : Method Not Allowed


5xx : Errores del servidor
  500 : Internal Server Error
  504 : Gateway Timeout



fetch("https://fakestoreapi.com/products")

fetch("https://fakestoreapi.com/products",{
    method: "POST",
    headers: {
        "Content-Type": "application/json" 
        },
    body: JSON.stringify({nombre:"usuario1",password:"123"})
})


const pedido = fetch()

pedido.then()

pedido.catch()



//1) Hago el pedidod con Fecth : Como va a tardar me da una promesa, por eso el .then / .catch
fetch("https://fakestoreapi.com/products")
.then((respuesta)=>{
    //2) Obtenemos y validamos la respuesta del servidor
    //respuesta.json()/arrayBuffer()/text()/blob()
    //3) Transformo la respuesta al formato que yo queria

    console.log(respuesta.json())
    console.log("Termino el pedido")

})
.catch((error)=>{
    console.log("Hubo un error")
})


console.log("Hola")


STACK                   WEB APIs

                        fetch("https://fakestoreapi.com/products")







.  === misma carpeta

/  === raiz / entra a ...

.. === carpeta padre




 /* const MockAsync = new Promise((res) => {
      setTimeout(() => {
        console.log("pidiendo Productos...")
        const productosDeDB = ["Producto 1", "Producto 2", "Producto 3"]
        res(productosDeDB)
      }, 2000)
    })

    MockAsync.then(productos => {
      setItems(productos)
    }) */




function foo(e){
  console.log(e)
}




const btn = document.querySelector("button")
btn.addEventListener("click",foo)

